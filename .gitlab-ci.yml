variables:
  DOCKER_HUB_PROXY: "artifactory.f5net.com/dockerhub-remote"
  PKG_NAME: test-cicd

default:
  image: "${DOCKER_HUB_PROXY}/golang:latest"
#   tags:
#     - saas-linux-medium-amd64

stages:
  - lint
  - build
  - test
  - release
  - publish

# variables:
#   # TODO(@timofurrer): verify if there is an option to read this version from either .go-version or go.mod
#   GO_VERSION: "1.20"
#   # NOTE(@timofurrer): used for caching, see `cache.paths` settings
#   GOPATH: ${CI_PROJECT_DIR}/.go
#   IMAGE_TAG: latest

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_IID
      changes:
        - .gitlab/ci/Dockerfile
        - .go-version
      variables:
        IMAGE_TAG: ${CI_COMMIT_REF_SLUG}
    # Apparently including the merged workflow rules in addition to the custom rule above doesn't work.
    # This comes from https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Workflows/MergeRequest-Pipelines.gitlab-ci.yml
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

cache:
  key:
    files:
      - go.sum
      - GNUMakefile
  paths:
    - .go/pkg/mod

# .run-for-supported-versions:
#   parallel:
#     matrix:
#       - GITLAB_VERSION:
#           - "15.8.4-${GITLAB_EDITION}.0"
#           - "15.9.3-${GITLAB_EDITION}.0"
#           - "15.10.0-${GITLAB_EDITION}.0"

# Disabling code navigatino with LSIF, until the upload issue is solved.
# see https://gitlab.com/gitlab-org/gitlab/-/issues/365885#note_1219840952
# code_navigation:
#   needs: []
#   stage: build
#   image: sourcegraph/lsif-go:v1
#   allow_failure: true # recommended
#   script:
#     - lsif-go
#     - ls -lh dump.lsif
#   artifacts:
#     reports:
#       lsif: dump.lsif
#   rules:
#     - if: $CI_DEFAULT_BRANCH == $CI_COMMIT_REF_NAME
#     - if: $CI_COMMIT_TAG

# danger-review:
#   needs: []
#   stage: lint
#   allow_failure: true
#   variables:
#     GITLAB_DANGERFILES_VERSION: "3.6.4"

make:lint:
  needs: []
  stage: lint
  script:
    - go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.51.2
    - golangci-lint --version
    - make ${TARGET}
  parallel:
    matrix:
      - TARGET:
          - lint
go:build:
  rules:
    - if: $CI_MERGE_REQUEST_IID
      changes:
        - "**/*.go"
        - go.mod
        - go.sum
        - .gitlab-ci.yml
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
  needs: []
  stage: build
  script:
    - make build

go:test:
  rules:
    - if: $CI_MERGE_REQUEST_IID
      changes:
        - "**/*.go"
        - go.mod
        - go.sum
        - .gitlab-ci.yml
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
  stage: test
  script:
    - make test

goreleaser:
  stage: release
  dependencies: []
  only:
    - tags
  image:
    name: goreleaser/goreleaser:v1.12.1
    entrypoint: [""]
  variables:
    # Disable shallow cloning so that goreleaser can diff between tags to
    # generate a changelog.
    GIT_DEPTH: 0
    GITLAB_TOKEN: $CI_JOB_TOKEN
  before_script:
    - apk add gpg-agent
    - gpg --batch --no-tty --import $GPG_PRIVATE_KEY
    - "export GPG_FINGERPRINT=$(gpg --with-colons --list-keys | awk -F: '/^pub/ { print $5 }')"
  script:
    - goreleaser release
    # NOTE(@timofurrer): goreleaser doesn't write `release.extra_files` to the `dist/` folder
    #                    before upload, therefore, we are going to create it for now.
    #                    Note that it also strips the first character (the leading `v`) from the tag
    - cp terraform-registry-manifest.json dist/${CI_PROJECT_NAME}_${CI_COMMIT_TAG:1}_manifest.json
  artifacts:
    paths:
      - dist/$CI_PROJECT_NAME_*.zip
      - dist/$CI_PROJECT_NAME_*_SHA256SUMS*
      - dist/$CI_PROJECT_NAME_*_manifest.json
      - docs/
      - CHANGELOG.md

github-for-terraform-registry:
  stage: publish
  only:
    - tags
  image: alpine:3.16
  variables:
    GIT_STRATEGY: none
    GITHUB_ORG: RavinderReddyF5
    GITHUB_REPO: $CI_PROJECT_NAME
  before_script:
    - apk add --update curl jq file git
    - ls dist/
  script:
    # NOTE(@timofurrer): publish docs to GitHub, so that they end up in the GitHub release Source code assets,
    #                    ready for the Terraform Registry to discover.
    - |
      git clone --depth 1 https://gitlab-terraform-provider-bot:$GITHUB_TOKEN_FOR_SYNC@github.com/$GITHUB_ORG/$GITHUB_REPO.git /tmp/github-repo
      cp -rf docs CHANGELOG.md /tmp/github-repo
      cd /tmp/github-repo
      git config user.email "Terraform-Provider-Bot@gitlab.com"
      git config user.name "gitlab-terraform-provider-bot"
      git add docs CHANGELOG.md
      git commit --message "Update docs for $CI_COMMIT_TAG release" --allow-empty
      git push
      cd -
      rm -rf /tmp/github-repo
    # create a pre-release Release on GitHub
    # see https://docs.github.com/en/rest/releases/releases#create-a-release
    - |
      gh_release=$(curl --silent --show-error --fail-with-body -X POST -H "Accept: application/vnd.github.v3+json" -H "Authorization: token $GITHUB_TOKEN_FOR_SYNC" \
        https://api.github.com/repos/$GITHUB_ORG/$GITHUB_REPO/releases \
        -d '{
          "tag_name":"'$CI_COMMIT_TAG'",
          "target_commitish":"main",
          "name":"'$CI_COMMIT_TAG'",
          "body":"This release hosted on GitHub only exists because it is the only way to publish to the Terraform Provider Registry.\n\nSee the official release page on GitLab here: **'$CI_PROJECT_URL'/-/releases/'$CI_COMMIT_TAG'**",
          "draft":false,
          "prerelease":true,
          "generate_release_notes":false
        }'
      )
    - gh_release_id=$(echo $gh_release | jq -r '.id')
    # NOTE(@timofurrer): cannot use `.upload_url` from `$gh_release`, because it contains the query parameters in some weird unusable way ...
    - gh_release_upload_url="https://uploads.github.com/repos/$GITHUB_ORG/$GITHUB_REPO/releases/$gh_release_id/assets"
    - 'echo "GitHub Release URL: $gh_release_upload_url"'
    # uploading release assets for GitHub release created in previous step
    # see https://docs.github.com/en/rest/releases/assets#upload-a-release-asset
    - |
      echo "Uploading assets from dist/ produced by goreleaser"
      for asset in dist/*; do
        echo -n "Uploading $asset ..."
        content_type=$(file -b --mime-type "$asset")
        filename=$(basename "$asset")
        curl --silent --output /dev/null --show-error --fail-with-body -X POST -H "Accept: application/vnd.github.v3+json" -H "Authorization: token $GITHUB_TOKEN_FOR_SYNC" \
          "$gh_release_upload_url?name=$filename" \
          -H "Content-Type: $content_type" \
          --data-binary "@$asset"
        echo " done."
      done
    # now that all assets are uploaded we can "release" the "pre-release" created earlier.
    - |
      curl --silent --show-error --fail-with-body \
        -X PATCH \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: token $GITHUB_TOKEN_FOR_SYNC" \
        https://api.github.com/repos/$GITHUB_ORG/$GITHUB_REPO/releases/$gh_release_id \
        -d '{"prerelease":false}'